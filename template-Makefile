#!/usr/bin/make -f


# Install/Uninstall make script for `<<TEMPLATE_PROJECT>>` CLang plugin
# Copyright (C) <<TEMPLATE_DATE>> <<TEMPLATE_AUTHOR>>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
#    Make variables to satisfy conventions
#
NAME = <<TEMPLATE_PROJECT>>
VERSION = <<TEMPLATE_VERSION>>
PKG_NAME = $(NAME)-$(VERSION)


#
#    Make variables that readers &/or maintainers may wish to modify
#
## C Compiler options
CC = gcc
CFLAGS = -g -Wall
AFLAGS = -S -Wall

## Git options
GIT_REMOTE__BRANCH := main
GIT_REMOTE__NAME := origin
GIT_LOCAL__BRANCH := local

ifeq '$(shell id -u)' '0'
	INSTALL_DIRECTORY := /usr/local/sbin
else
	INSTALL_DIRECTORY := <<TEMPLATE_INSTALL_DIRECTORY>>
endif


#
#    Make variables set upon run-time
#
## Detect Operating System
ifeq '$(findstring :,$(PATH))' ';'
	__OS__ := Windows
else
	__OS__ := $(shell uname 2>/dev/null || echo 'Unknown')
	__OS__ := $(patsubst CYGWIN%,Cygwin,$(__OS__))
	__OS__ := $(patsubst MSYS%,MSYS,$(__OS__))
	__OS__ := $(patsubst MINGW%,MSYS,$(__OS__))
endif

ifeq '$(__OS__)' 'Windows'
	__PATH_SEPARATOR__ := \\
else
	__PATH_SEPARATOR__ := /
endif


#
#    Lambda-like functions
#
path_append = $(strip $(1))$(strip $(__PATH_SEPARATOR__))$(strip $(2))


#
#    Make variables built upon run-time
#
## Obtain directory path that this Makefile lives in
##  Note ':=' is to avoid late binding that '=' entails
ROOT_DIRECTORY_PATH := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))
ROOT_DIRECTORY_NAME := $(notdir $(patsubst %/,%,$(ROOT_DIRECTORY_PATH)))

SOURCE_DIRECTORY := $(call path_append, $(ROOT_DIRECTORY_PATH), source)
OUTPUT_DIRECTORY := $(call path_append, $(ROOT_DIRECTORY_PATH), output)

SOURCE_PATH := $(call path_append, $(SOURCE_DIRECTORY), $(NAME).c)
OUTPUT_PATH := $(call path_append, $(OUTPUT_DIRECTORY), $(NAME).o)
ASSEMBLY_PATH := $(call path_append, $(OUTPUT_DIRECTORY), $(NAME).asm)

INSTALL_PATH := $(call path_append, $(INSTALL_DIRECTORY), $(NAME))


#
#    Override variables via optional configuration file
#
CONFIG_PATH := $(call path_append, $(ROOT_DIRECTORY_PATH), .config-make)
ifneq ("$(wildcard $(CONFIG_PATH))", "")
	include $(CONFIG_PATH)
endif


#
#    Make options/commands
#
.ONESHELL: install uninstall

.SILENT: default\
         ci-test\
         install\
         uninstall\
         upgrade\
         git-upgrades\
         config\
         clean\
         git-checkout\
         git-fetch\
         git-merge\
         git-submodule-update\
         git-track-changes\
         assemble\
         compile\
         execute\
         link\
         unlink\
         copy\
         remove\
         list

.PHONY: default\
        ci-test\
        install\
        uninstall\
        upgrade\
        git-upgrades\
        config\
        clean\
        git-checkout\
        git-fetch\
        git-merge\
        git-submodule-update\
        git-track-changes\
        assemble\
        compile\
        execute\
        link\
        unlink\
        copy\
        remove\
        list


##
#
default: ## Run by default when no targets are supplied
default: | compile

ci-test: ## Runs targets -> compile execute
ci-test: | compile execute

install: ## Runs targets -> git-checkout compile link
install: | git-checkout compile link

uninstall: ## Runs targets -> unlink
uninstall: | unlink

upgrade: ## Runs targets -> unlink git-upgrades compile link
upgrade: | unlink git-upgrades compile link

git-upgrades: ## Runts targets -> git-checkout git-fetch git-track-changes git-merge git-submodule-update
git-upgrades: | git-checkout git-fetch git-track-changes git-merge git-submodule-update


##
#
config: SHELL := /bin/bash
config: ## Writes configuration file
	tee "$(CONFIG_PATH)" 1>/dev/null <<EOF
	SCRIPT_NAME = $(SCRIPT_NAME)
	INSTALL_DIRECTORY = $(INSTALL_DIRECTORY)
	__OS__ = $(__OS__)
	__PATH_SEPARATOR__ = $(__PATH_SEPARATOR__)
	GIT_REMOTE__BRANCH = $(GIT_REMOTE__BRANCH)
	GIT_REMOTE__NAME = $(GIT_REMOTE__NAME)
	GIT_LOCAL__BRANCH = $(GIT_LOCAL__BRANCH)
	CC = $(CC)
	AFLAGS = $(AFLAGS)
	CFLAGS = $(CFLAGS)
	# vim: filetype=make
	EOF


clean: SHELL := /bin/bash
clean: ## Removes configuration file
	[[ -f "$(CONFIG)" ]] && {
		rm -v "$(CONFIG)"
	}


##
#
git-checkout: SHELL := /bin/bash
git-checkout: ## Checkout Git branch to track local changes
	cd "$(ROOT_DIRECTORY_PATH)"
	_git_branches="$$(git branch --list)"
	_remote_branch="$(GIT_REMOTE__BRANCH)"
	_local_branch="$$(awk '$$0 ~ $(GIT_LOCAL__BRANCH) { gsub("[* ]", ""); print; }' <<<"$${_git_branches}" | head -1)"
	if (( "$${#_local_branch}" )); then
		git checkout "$${#_local_branch}"
	else
		git checkout -b "$${#_local_branch}"
	fi

git-fetch: SHELL := /bin/bash
git-fetch: ## Fetches updates from Git remote
	cd "$(ROOT_DIRECTORY_PATH)"
	git fetch $(GIT_REMOTE__NAME) $(GIT_REMOTE__BRANCH)

git-merge: SHELL := /bin/bash
git-merge: ## Merges changes from Git remote
	cd "$(ROOT_DIRECTORY_PATH)"
	git merge --strategy-option ours --squash "$(GIT_REMOTE__BRANCH)"

git-submodule-update: SHELL := /bin/bash
git-submodule-update: ## Runs update commands for Git submodules
	cd "$(ROOT_DIRECTORY_PATH)"
	git submodule update --init --merge --recursive

git-track-changes: SHELL := /bin/bash
git-track-changes: ## Runs `git add --all && git commit -m ':robot: Tracks local customizations'`
	cd "$(ROOT_DIRECTORY_PATH)"
	if grep -qE -- '^Untracked files|^Changes to be committed|^Changes not staged' <<<"$$(git status)"; then
		git add --all && git commit -m ':robot: Tracks local customizations'
	fi


##
#
assemble: ## Builds assembly file from source
assemble: $(SOURCE_PATH)
	$(CC) $(AFLAGS) "$(SOURCE_PATH)" -o "$(ASSEMBLY_PATH)"

compile: ## Compiles binary from source file(s)
compile: $(SOURCE_PATH)
	$(CC) $(CFLAGS) "$(SOURCE_PATH)" -o "$(OUTPUT_PATH)"

execute: SHELL := /bin/bash
execute: ## Runs compiled executable
execute: $(OUTPUT_PATH)
	"$(OUTPUT_PATH)" <<<"2000"
	"$(OUTPUT_PATH)" <<<"1900" || { true; }
	"$(OUTPUT_PATH)" <<<"noop" || { true; }
	"$(OUTPUT_PATH)" <<<"2400"


##
#
link: SHELL := /bin/bash
link: ## Symbolically links executable
	if [[ -L "$(INSTALL_PATH)" ]]; then
		printf >&2 'Link already exists -> %s\n' "$(INSTALL_PATH)"
	elif [[ -f "$(INSTALL_PATH)" ]]; then
		printf >&2 'Error: link target is a file -> %s\n' "$(INSTALL_PATH)"
	else
		ln -sv "$(SOURCE_PATH)" "$(INSTALL_PATH)"
	fi

unlink: SHELL := /bin/bash
unlink: ## Removes symbolic link to executable
	if [[ -L "$(INSTALL_PATH)" ]]; then
		rm -v "$(INSTALL_PATH)"
	else
		printf >&2 'Error: no link to remove at -> %s\n' "$(INSTALL_PATH)"
	fi

copy: SHELL := /bin/bash
copy: ## Copy executable to install path
	if [[ -L "$(INSTALL_PATH)" ]]; then
		printf >&2 'Link already exists -> %s\n' "$(INSTALL_PATH)"
	elif [[ -f "$(INSTALL_PATH)" ]]; then
		printf >&2 'File already exists -> %s\n' "$(INSTALL_PATH)"
	else
		cp -v "$(SOURCE_PATH)" "$(INSTALL_PATH)"
	fi

remove: SHELL := /bin/bash
remove: ## Removes executable copy from install path
	if [[ -f "$(INSTALL_PATH)" ]]; then
		rm -v "$(INSTALL_PATH)"
	else
		printf >&2 'Error: no file to remove at -> %s\n' "$(INSTALL_PATH)"
	fi


##
#
list: SHELL := /bin/bash
list: ## Lists available make commands
	gawk 'BEGIN {
		delete matched_lines
	}
	{
		if ($$0 ~ "^[a-z0-9A-Z-]{1,32}: [#]{1,2}[[:print:]]*$$") {
			matched_lines[length(matched_lines)] = $$0
		}
	}
	END {
		print "## Make Commands for $(NAME) ##\n"
		for (k in matched_lines) {
			split(matched_lines[k], line_components, ":")
			gsub(" ## ", "    ", line_components[2])
			print line_components[1]
			print line_components[2]
			if ((k + 1) != length(matched_lines)) {
				print
			}
		}
	}' "$(ROOT_DIRECTORY_PATH)/Makefile"

